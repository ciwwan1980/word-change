{"version":3,"sources":["logo.svg","component/MainScreen.js","component/Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MainScreen","props","useState","index","setIndex","useEffect","interval","setInterval","console","log","clearInterval","className","words","Form","message","setMessage","setWords","word","setWord","full","setFull","setBtn","onSubmit","event","preventDefault","name","value","onChange","e","target","onClick","length","setTimeout","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,kC,8ICE5B,SAASC,EAAWC,GAAQ,IAAD,EAGlBC,mBAAS,GAHS,mBAGnCC,EAHmC,KAG7BC,EAH6B,KAuBtC,OAlBJC,qBAAU,WACN,IAAIC,EAaJ,OAXAA,EAAWC,aAAY,WAChBJ,EAAM,GACJC,EAASD,EAAM,GACfK,QAAQC,IAAI,uBAEbL,EAAS,GACTI,QAAQC,IAAI,qBAGjB,KAEI,WACHC,cAAcJ,MAEpB,CAACH,IAEK,yBAAKQ,UAAU,WACX,sCAAY,8BAAOV,EAAMW,MAAMT,MCsD5BU,MA7Ef,WAAiB,IAAD,EAEWX,mBAAS,IAFpB,mBAETY,EAFS,KAEDC,EAFC,OAGOb,mBAAS,IAHhB,mBAGTU,EAHS,KAGHI,EAHG,OAIKd,mBAAS,IAJd,mBAITe,EAJS,KAIJC,EAJI,OAKKhB,oBAAS,GALd,mBAKTiB,EALS,KAKJC,EALI,OAMGlB,oBAAS,GANZ,mBAMLmB,GANK,WA4ChB,OAEA,iCACI,iDAECF,EAAM,kBAACnB,EAAD,CAAYY,MAAOA,IAAS,0BAAMU,SAxCtB,SAACC,GAChBA,EAAMC,kBAuCuDb,UAAU,QAEvE,yBAAKA,UAAU,aAEf,6BACA,6CAEA,yBAAKA,UAAU,SACf,2BAAOc,KAAK,UAAUC,MAAOT,EAAMU,SAAU,SAACC,GAAD,OAAKV,EAAQU,EAAEC,OAAOH,WAGpE,yBAAKf,UAAU,UACf,2BAAIG,GACH,4BAAQgB,QAhCG,WAERlB,EAAMmB,OAAO,GAChBhB,EAAW,8BACXiB,YAAW,WACPjB,EAAW,MACZ,MAECK,GAAQ,KAwBZ,uBACA,4BAAQU,QAjDG,WAERlB,EAAMmB,OAAO,IACTf,EAAS,GAAD,mBAAKJ,GAAL,CAAWK,KACrBC,EAAQ,KAEK,IAAfN,EAAMmB,SACLhB,EAAW,yCACXM,GAAO,GACPW,YAAW,WACPjB,EAAW,MACZ,KACHG,EAAQ,OAqCZ,qB,MCrDOe,MATf,WACE,OACE,yBAAKtB,UAAU,OAChB,6BACC,kBAAC,EAAD,SCGgBuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMrC,c","file":"static/js/main.7c67025e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{useEffect,useState} from 'react'\nimport \"./mainScreen.css\"\nexport default function MainScreen(props) {\n\n   \nconst [index,setIndex]= useState(0)\n\nuseEffect(()=>{\n    let interval;\n\n    interval = setInterval(() => {\n        if(index<3){\n             setIndex(index+1)\n             console.log(\"interval runni ng\")\n        }else{\n            setIndex(0)\n            console.log(\"clear interval\")\n        }\n       \n    }, 2000);\n\n    return ()=>{\n        clearInterval(interval)\n    }\n},[index])\n    return (\n        <div className=\"display\">\n            <h1 >I am a <span>{props.words[index]}</span></h1>\n        </div>\n    )\n}\n","import React,{useState} from 'react';\nimport MainScreen from \"./MainScreen\"\n\n\nfunction Form (){\n\nconst [message,setMessage]=useState(\"\")\nconst [words,setWords]=useState([])\nconst [word,setWord]=useState(\"\")\nconst [full,setFull]=useState(false)\nconst [btn,setBtn]=useState(false)\n\n    // FormMethods\n    const handleSubmit=(event)=>{\n        event.preventDefault();\n      \n    }\n\n    const  AddWord=()=>{\n\n        if(words.length<3){\n               setWords([...words,word])\n             setWord(\"\")\n        }\n        if(words.length===2){\n            setMessage(\"now you may click on show me messsage\")\n            setBtn(true)\n            setTimeout(() => {\n                setMessage(\"\")\n            }, 3000);\n            setWord(\"\")\n        }\n    \n    }\n const showMessage=()=>{\n\n        if(words.length<3){\n        setMessage(\"please add atleast 3 words\")\n        setTimeout(() => {\n            setMessage(\"\")\n        }, 2000);\n        }else{\n            setFull(true)\n        }\n \n        \n    }\n \nreturn(\n\n<article>\n    <h1>Generate Password</h1>\n    \n    {full? <MainScreen words={words}/>:<form onSubmit={handleSubmit} className=\"flex\">\n \n        <div className=\"container\">\n  \n        <div>\n        <label>Add word </label>\n        </div>\n        <div className=\"input\">\n        <input name=\"message\" value={word} onChange={(e)=>setWord(e.target.value)} />\n        </div>\n\n       <div className=\"button\">   \n       <p>{message}</p>\n        <button onClick={showMessage} >Shwo me the Message</button>\n        <button onClick={AddWord}>Add new word</button>\n        </div>\n  </div>\n    </form> }\n \n</article>\n)\n    }\n\n\n\n\n\n\nexport default Form;\n ","import React from 'react';\nimport logo from './logo.svg';\nimport Form from \"./component/Form\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n   <div>\n    <Form/></div>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}